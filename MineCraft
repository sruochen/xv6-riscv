2022/11/12

xv6: 一个简单的类UNIX教学操作系统
1. 操作系统接口
2. 操作系统组成
3. 页表
4. 陷阱与系统调用
5. 中断和设备驱动
6. 锁
7. 调度
8. 文件系统
9. 并发访问
10. 总结

前言和致谢
操作系统课程的文本草稿
1974 UNIXv6分时系统
1988 C程序设计语言
2017 RISC-V开放架构
2000 莱昂氏UNIXv6注解

本科生的操作系统工程(6.S081 -> 6.1810): https://pdos.csail.mit.edu/6.1810/
硕士生的操作系统研究(6.828  -> 6.5810): https://abelay.github.io/6828seminar/

1. 操作系统接口
OS管控硬件、提供程序运行环境。
OS通过接口提供服务，接口设计既要简单又要提供复杂功能，诀窍是设计简单通用接口组合成复杂机制。

xv6模仿UNIXv6的基本接口和内部设计，提供了精简的接口，其机制结合得很好，提供了惊人的通用性。
现代操作系统如BSD、Linux、macOS、Solaris，甚至Windows都提供了类UNIX接口，了解xv6值得作为开端。

xv6依然是传统形式的内核即是作为给运行程序(有包含指令、数据和栈的内存的进程)提供服务而存在的特殊程序。
指令执行程序的计算，数据是计算所作用的变量，而栈组织程序的过程调用。计算机通常有许多进程，但只有一个内核。

调用SysCall(操作系统接口中的调用之一)访问来内核服务。
一个进程在用户空间和内核空间之间交替执行(系统调用进入内核而内核执行服务并返回)。

内核使用CPU提供的硬件保护机制确保在用户空间中执行的每个进程只能访问自己的内存。
内核以实现这些保护所需的硬件特权执行而用户程序在没有这些特权的情况下执行。
当用户程序调用系统调用时，硬件会提升特权级别并开始执行内核中预先安排的函数。

CPU通常指的是执行计算的硬件元素，也是中央处理单元的首字母缩写词。
其他文档如RISC-V规范也使用Processor/core/hart而非CPU。

内核提供的系统调用集合是用户程序看得到的接口。
xv6内核提供了UNIX内核传统上提供的服务和系统调用的子集。

列出xv6的所有系统调用。
int fork();
int exit(int status);
int wait(int *status);
int kill(int pid);
int getpid();
int sleep(int n);



1.1 进程和内存
1.2 I/O和文件描述符
1.3 管道
1.4 文件系统
1.5 现实世界
1.6 练习
